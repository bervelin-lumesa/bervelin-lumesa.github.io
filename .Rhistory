blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
install.packages("gtsummary")
?gtsummary::tbl_summary()
trial |>
select(age, grade, response) |>
tbl_summary()
library(gtsummary)
trial |>
select(age, grade, response) |>
tbl_summary()
tbl_summary()
blogdown::serve_site()
install.packages("survey")
?bslib::accordion()
items <- lapply(LETTERS, function(x) {
accordion_panel(paste("Section", x), paste("Some narrative for section", x))
})
library(shiny)
library(bslib)
items <- lapply(LETTERS, function(x) {
accordion_panel(paste("Section", x), paste("Some narrative for section", x))
})
# First shown by default
accordion(!!!items)
# First shown by default
accordion(!!!items)
# Nothing shown by default
accordion(!!!items, open = FALSE)
# Everything shown by default
accordion(!!!items, open = TRUE)
# Show particular sections
accordion(!!!items, open = "Section B")
accordion(!!!items, open = c("Section A", "Section B"))
# Provide an id to create a shiny input binding
library(shiny)
ui <- page_fluid(
accordion(!!!items, id = "acc")
)
server <- function(input, output) {
observe(print(input$acc))
}
shinyApp(ui, server)
install.packages("remotes")
remotes::install_github("tidymodels/TMwR")
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown:::new_post_addin()
blogdown::serve_site()
6825-600
300000/2850
80*2850
30*2850
1300000+400000
1300000+400000+7*12500
1300000+400000+7*12500+25000
170*2850
170*2800
484500-476000
1300000+400000+7*12500+25000+170*2850
1300000+400000+7*12500+25000+210*2850
75*14500
50-32
1300000+400000+7*12500+25000+210*2850-2395000
1300000+400000+7*12500+10000+210*2850
1300000+400000+7*12500+20000+210*2850
1300000+400000+7*12500+25000+210*2850
1300000+400000+7*12500+25000+210*2850+2500
1300000+400000+7*12500+25000+210*2850+2000
blogdown::serve_site()
df_matches <-
tibble(
team = c("FC Bayern München", "SV Werder Bremen", "Borussia Dortmund", "VfB Stuttgart",
"Borussia M'gladbach", "Hamburger SV", "Eintracht Frankfurt",
"FC Schalke 04", "1. FC Köln", "Bayer 04 Leverkusen"),
matches = c(2000, 1992, 1924, 1924, 1898, 1866, 1856, 1832, 1754, 1524),
won =     c(1206,  818,  881,  782,  763,  746,  683,  700,  674,  669),
lost =    c( 363,  676,  563,  673,  636,  625,  693,  669,  628,  447)
) |>
mutate(team = fct_rev(fct_inorder(team))) |>
pivot_longer(
cols = -c(team, matches),
names_to = "type",
values_to = "result"
) |>
mutate(share = result / matches) |>
arrange(team, -share) |>
mutate(is_smaller = if_else(row_number() == 1, 0, 1), .by = team)
library(dplyr)
df_matches <-
tibble(
team = c("FC Bayern München", "SV Werder Bremen", "Borussia Dortmund", "VfB Stuttgart",
"Borussia M'gladbach", "Hamburger SV", "Eintracht Frankfurt",
"FC Schalke 04", "1. FC Köln", "Bayer 04 Leverkusen"),
matches = c(2000, 1992, 1924, 1924, 1898, 1866, 1856, 1832, 1754, 1524),
won =     c(1206,  818,  881,  782,  763,  746,  683,  700,  674,  669),
lost =    c( 363,  676,  563,  673,  636,  625,  693,  669,  628,  447)
) |>
mutate(team = fct_rev(fct_inorder(team))) |>
pivot_longer(
cols = -c(team, matches),
names_to = "type",
values_to = "result"
) |>
mutate(share = result / matches) |>
arrange(team, -share) |>
mutate(is_smaller = if_else(row_number() == 1, 0, 1), .by = team)
library(tidyverse)
df_matches <-
tibble(
team = c("FC Bayern München", "SV Werder Bremen", "Borussia Dortmund", "VfB Stuttgart",
"Borussia M'gladbach", "Hamburger SV", "Eintracht Frankfurt",
"FC Schalke 04", "1. FC Köln", "Bayer 04 Leverkusen"),
matches = c(2000, 1992, 1924, 1924, 1898, 1866, 1856, 1832, 1754, 1524),
won =     c(1206,  818,  881,  782,  763,  746,  683,  700,  674,  669),
lost =    c( 363,  676,  563,  673,  636,  625,  693,  669,  628,  447)
) |>
mutate(team = fct_rev(fct_inorder(team))) |>
pivot_longer(
cols = -c(team, matches),
names_to = "type",
values_to = "result"
) |>
mutate(share = result / matches) |>
arrange(team, -share) |>
mutate(is_smaller = if_else(row_number() == 1, 0, 1), .by = team)
df_matches
# Library
library(ggplot2)
library(dplyr)
library(hrbrthemes)
install.packages("hrbrthemes")
library(hrbrthemes)
# Create data
value1 <- abs(rnorm(26))*2
data <- data.frame(
x=LETTERS[1:26],
value1=value1,
value2=value1+1+rnorm(26, sd=1)
)
data
data
# Reorder data using average? Learn more about reordering in chart #267
data <- data %>%
rowwise() %>%
mutate( mymean = mean(c(value1,value2) )) %>%
arrange(mymean) %>%
mutate(x=factor(x, x))
data
# Plot
ggplot(data) +
geom_segment( aes(x=x, xend=x, y=value1, yend=value2), color="grey") +
geom_point( aes(x=x, y=value1), color=rgb(0.2,0.7,0.1,0.5), size=3 ) +
geom_point( aes(x=x, y=value2), color=rgb(0.7,0.2,0.1,0.5), size=3 ) +
coord_flip()+
theme_ipsum() +
theme(
legend.position = "none",
) +
xlab("") +
ylab("Value of Y")
