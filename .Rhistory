ch_generate("name")
nom <- ch_generate("name")
nom
nom
set.seed(42)
menages <- data.frame(
id_menage = 1:4,
longitude = c(15.3522, 15.4050, 15.1276, 15.2093),
latitude = c(-4.8566, -4.5200, -4.5074, -4.8688),
photo_du_menage = c("1.jpg", "2.jpg", "3.jpg", "4.jpg"),
nom_chef = nom
)
set.seed(42)
menages <- data.frame(
id_menage = 1:10,
longitude = c(15.3522, 15.4050, 15.1276, 15.2093,
15.4522, 15.3050, 15.2276, 15.5093, 15.4750, 15.3876),
latitude = c(-4.8566, -4.5200, -4.5074, -4.8688,
-4.1566, -4.4200, -4.1074, -4.2688, -4.1574, -4.4688),
photo_du_menage = c("1.jpg", "2.jpg", "3.jpg", "4.jpg,
5.jpg", "6.jpg", "7.jpg", "8.jpg", "9.jpg", "10.jpg"),
nom_chef = nom
)
id_menage = 1:10
length(id_menage)
longitude = c(15.3522, 15.4050, 15.1276, 15.2093,
15.4522, 15.3050, 15.2276, 15.5093, 15.4750, 15.3876)
length(longitude)
latitude = c(-4.8566, -4.5200, -4.5074, -4.8688,
-4.1566, -4.4200, -4.1074, -4.2688, -4.1574, -4.4688)
length(latitude)
photo_du_menage = c("1.jpg", "2.jpg", "3.jpg", "4.jpg,
5.jpg", "6.jpg", "7.jpg", "8.jpg", "9.jpg", "10.jpg")
length(photo_du_menage)
set.seed(42)
menages <- data.frame(
id_menage = 1:10,
longitude = c(15.3522, 15.4050, 15.1276, 15.2093,
15.4522, 15.3050, 15.2276, 15.5093, 15.4750, 15.3876),
latitude = c(-4.8566, -4.5200, -4.5074, -4.8688,
-4.1566, -4.4200, -4.1074, -4.2688, -4.1574, -4.4688),
photo_du_menage = c("1.jpg", "2.jpg", "3.jpg", "4.jpg",
"5.jpg", "6.jpg", "7.jpg", "8.jpg", "9.jpg", "10.jpg"),
nom_chef = nom
)
head(menages)
menages
set.seed(42)
menages <- data.frame(
id_menage = 1:10,
longitude = c(15.3522, 15.4050, 15.1276, 15.2093,
15.4522, 15.3050, 15.2276, 15.5093, 15.4750, 15.3876),
latitude = c(-4.8566, -4.5200, -4.5074, -4.8688,
-4.1566, -4.4200, -4.1074, -4.2688, -4.1574, -4.4688),
photo_du_menage = c("1.jpg", "2.jpg", "3.jpg", "4.jpg",
"5.jpg", "6.jpg", "7.jpg", "8.jpg", "9.jpg", "10.jpg"),
nom_chef = nom
)
head(menages)
nom
library(shiny)
library(leaflet)
library(base64enc)
library(dplyr)
library(charlatan)
set.seed(42)
nom <- ch_generate("name")
menages <- data.frame(
id_menage = 1:10,
longitude = c(15.3522, 15.4050, 15.1276, 15.2093,
15.4522, 15.3050, 15.2276, 15.5093, 15.4750, 15.3876),
latitude = c(-4.8566, -4.5200, -4.5074, -4.8688,
-4.1566, -4.4200, -4.1074, -4.2688, -4.1574, -4.4688),
photo_du_menage = c("1.jpg", "2.jpg", "3.jpg", "4.jpg",
"5.jpg", "6.jpg", "7.jpg", "8.jpg", "9.jpg", "10.jpg"),
nom_chef = nom
)
head(menages)
set.seed(42)
nom <- ch_generate("name")
menages <- data.frame(
id_menage = 1:10,
longitude = c(15.3522, 15.4050, 15.1276, 15.2093,
15.4522, 15.3050, 15.2276, 15.5093, 15.4750, 15.3876),
latitude = c(-4.8566, -4.5200, -4.5074, -4.8688,
-4.1566, -4.4200, -4.1074, -4.2688, -4.1574, -4.4688),
photo_du_menage = c("1.jpg", "2.jpg", "3.jpg", "4.jpg",
"5.jpg", "6.jpg", "7.jpg", "8.jpg", "9.jpg", "10.jpg"),
nom_chef = nom
)
head(menages)
getwd()
write.csv(menages, "content/post/2024-11-14-cartographie-interactive-integrer-des-photos-d-enquetes-menages-avec-leaflet-et-r/df.csv")
menages
names(menages)
names(menages)[5]
names(menages)[5] <- "nom_chef"
write.csv(menages, "content/post/2024-11-14-cartographie-interactive-integrer-des-photos-d-enquetes-menages-avec-leaflet-et-r/df.csv")
df <- read.csv("content/post/2024-11-14-cartographie-interactive-integrer-des-photos-d-enquetes-menages-avec-leaflet-et-r/df.csv")
df <- read.csv("df.csv")
df <- read.csv("df.csv")
head(df)
df <- read.csv("df.csv")
head(df)
df <- read.csv("df.csv", row.names = F)
write.csv(menages, "content/post/2024-11-14-cartographie-interactive-integrer-des-photos-d-enquetes-menages-avec-leaflet-et-r/df.csv", row.names = F)
df <- read.csv("df.csv")
head(df)
menages <- menages |>
rowwise() |>
mutate(photo_encoded = dataURI(file = file.path(dossier_images, photo_du_menage), mime = "image/png"))
(m <- leaflet(menages) %>%
addTiles())
# Ajouter les marqueurs avec les photos dans les pop-ups.
for (i in 1:nrow(menages)) {
m <- m %>%
addMarkers(
lng = menages$longitude[i],
lat = menages$latitude[i],
popup = paste0("<table>",
"<tr>",
"<td>Nom du chef de m√©nage</td>",
paste("<td>:", menages$nom_chef[i], "</td>"),
"</tr>",
"</table>",
"<img src='", menages$photo_encoded[i], "' width='200' height='150'>")
)
}
m
df <- read.csv("df.csv")
head(df)
df |>
select(id_menage, nom_chef)
df |> select(id_menage, nom_chef, latitude, longitude, photo_du_menage)
df <- df |> select(id_menage, nom_chef, latitude, longitude, photo_du_menage)
names(df)
names(df)[5]
names(df)[5] <- "photo_mild"
df
write.csv(df, "content/post/2024-11-14-cartographie-interactive-integrer-des-photos-d-enquetes-menages-avec-leaflet-et-r/df.csv", row.names = F)
df <- read.csv("df.csv")
head(df)
blogdown::serve_site()
blogdown:::new_post_addin()
blogdown::serve_site()
150*2800
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
install.packages('remotes')
remotes::install_github("MTES-MCT/savoirfR")
devtools::install_github("MTES-MCT/savoirfR")
exp(1000)
exp(1)
exp(10)
exp(100)
exp(1000)
blogdown::serve_site()
file.access("content/")
file.info("content/")
dir("content/")
dir("D:/Working with softwares/CDF_PREDICTION/")
dir("D:/Working with softwares/CDF_PREDICTION/100/")
length(dir("D:/Working with softwares/CDF_PREDICTION/100/"))
folders <- dir("D:/Working with softwares/CDF_PREDICTION/")
folders
length(folders)
path.expand(folders)
dir("D:/Working with softwares/CDF_PREDICTION/")
paste0("D:/Working with softwares/CDF_PREDICTION/", folders[1])
paste0("D:/Working with softwares/CDF_PREDICTION/", folders[2])
paste0("D:/Working with softwares/CDF_PREDICTION/", folders[3])
paste0("D:/Working with softwares/CDF_PREDICTION/", folders[8])
paste0("D:/Working with softwares/CDF_PREDICTION/", folders[9])
for(i in 1:length(folders)){
dir <- paste0("D:/Working with softwares/CDF_PREDICTION/", folders[i])
paste0("Dossier: ", folders[i])
}
for(i in 1:length(folders)){
dir <- paste0("D:/Working with softwares/CDF_PREDICTION/", folders[i])
res <- paste0("Dossier: ", folders[i])
princomp(res)
}
folders <- dir("D:/Working with softwares/CDF_PREDICTION/")
for(i in 1:length(folders)){
dir <- paste0("D:/Working with softwares/CDF_PREDICTION/", folders[i])
res <- paste0("Dossier: ", folders[i])
princomp(res)
}
folders
1:length(folders)
paste0("D:/Working with softwares/CDF_PREDICTION/", folders[1])
paste0("Dossier: ", folders[1])
folders <- dir("D:/Working with softwares/CDF_PREDICTION/")
for(i in 1:length(folders)){
dir <- paste0("D:/Working with softwares/CDF_PREDICTION/", folders[i])
res <- paste0("Dossier: ", folders[i])
print(res)
}
for(i in 1:length(folders)){
dir <- paste0("D:/Working with softwares/CDF_PREDICTION/", folders[i])
res <- paste0("Dossier: ", folders[i])
cat(res)
}
for(i in 1:length(folders)){
dir <- paste0("D:/Working with softwares/CDF_PREDICTION/", folders[i])
res <- paste0("Dossier: ", folders[i])
cat(res, "\n")
}
folders <- dir("D:/Working with softwares/CDF_PREDICTION/")
for(i in 1:length(folders)){
dir <- paste0("D:/Working with softwares/CDF_PREDICTION/", folders[i])
res <- paste0("Dossier: ", folders[i], ", ", length(dir), " billets")
cat(res, "\n")
}
dir <- paste0("D:/Working with softwares/CDF_PREDICTION/", folders[1])
dir
dir("D:/Working with softwares/CDF_PREDICTION/100/")
for(i in 1:length(folders)){
dir <- paste0("D:/Working with softwares/CDF_PREDICTION/", folders[i])
res <- paste0("Dossier: ", folders[i], ", ", length(dir(dir)), " billets")
cat(res, "\n")
}
folders <- dir("D:/Working with softwares/CDF_PREDICTION/")
for(i in 1:length(folders)){
current_folder <- paste0("D:/Working with softwares/CDF_PREDICTION/", folders[i])
res <- paste0("Dossier: ", folders[i], ", ", length(dir(current_folder)), " billets")
cat(res, "\n")
}
folders
data.frame("folder" = folders)
data.frame("folder" = folders, "count" = NULL)
data.frame("folder" = folders, "count" = 1)
data.frame("folder" = folders, "count" = NA)
order(folders)
ordered(folders)
data.frame("folder" = ordered(folders), "count" = NA)
data.frame("folder" = folders, "count" = NA)
df <- data.frame("folder" = folders, "count" = NA)
df
df["folder"]
df["folder"][1]
df$folder[1]
df$folder[8]
for(i in 1:length(folders)){
current_folder <- paste0("D:/Working with softwares/CDF_PREDICTION/", folders[i])
#res <- paste0("Dossier: ", folders[i], ", ", length(dir(current_folder)), " billets")
#cat(res, "\n")
res <- length(dir(current_folder))
cat(res, "\n")
}
for(i in 1:length(folders)){
current_folder <- paste0("D:/Working with softwares/CDF_PREDICTION/", folders[i])
#res <- paste0("Dossier: ", folders[i], ", ", length(dir(current_folder)), " billets")
#cat(res, "\n")
res <- length(dir(current_folder))
df$count[i] <- res
cat(res, "\n")
}
df
df <- t("billet" = folders, "count" = NA)
folders <- dir("D:/Working with softwares/CDF_PREDICTION/")
df <- t("billet" = folders, "count" = NA)
rm(list = ls())
df <- tibble::tibble("billet" = folders, "count" = NA)
folders <- dir("D:/Working with softwares/CDF_PREDICTION/")
df <- tibble::tibble("billet" = folders, "count" = NA)
df
for(i in 1:length(folders)){
current_folder <- paste0("D:/Working with softwares/CDF_PREDICTION/", folders[i])
#res <- paste0("Dossier: ", folders[i], ", ", length(dir(current_folder)), " billets")
#cat(res, "\n")
res <- length(dir(current_folder))
df$count[i] <- res
cat(res, "\n")
}
df
library(tidyverse)
folders <- dir("D:/Working with softwares/CDF_PREDICTION/")
df <- tibble::tibble("billet" = folders, "count" = NA)
for(i in 1:length(folders)){
current_folder <- paste0("D:/Working with softwares/CDF_PREDICTION/", folders[i])
#res <- paste0("Dossier: ", folders[i], ", ", length(dir(current_folder)), " billets")
#cat(res, "\n")
res <- length(dir(current_folder))
df$count[i] <- res
cat(res, "\n")
}
df |>
arrange(count)
nombre_billet <- function(dossier) {
folders <- dir(dossier)
df <- tibble::tibble("billet" = folders, "count" = NA)
for(i in 1:length(folders)){
current_folder <- paste0("D:/Working with softwares/CDF_PREDICTION/", folders[i])
#res <- paste0("Dossier: ", folders[i], ", ", length(dir(current_folder)), " billets")
#cat(res, "\n")
res <- length(dir(current_folder))
df$count[i] <- res
cat(res, "\n")
}
df |> arrange(count)
}
nombre_billet(dossier = "D:/Working with softwares/CDF_PREDICTION/")
nombre_billet <- function(dossier) {
folders <- dir(dossier)
df <- tibble::tibble("billet" = folders, "count" = NA)
for(i in 1:length(folders)){
current_folder <- paste0("D:/Working with softwares/CDF_PREDICTION/", folders[i])
#res <- paste0("Dossier: ", folders[i], ", ", length(dir(current_folder)), " billets")
#cat(res, "\n")
res <- length(dir(current_folder))
df$count[i] <- res
}
df |> arrange(count)
}
nombre_billet(dossier = "D:/Working with softwares/CDF_PREDICTION/")
nombre_billet(dossier = "D:/Working with softwares/CDF_PREDICTION/")
nombre_billet(dossier = "D:/Working with softwares/CDF_PREDICTION/")
nombre_billet(dossier = "D:/Working with softwares/CDF_PREDICTION/")
nombre_billet(dossier = "D:/Working with softwares/CDF_PREDICTION/")
nombre_billet(dossier = "D:/Working with softwares/CDF_PREDICTION/")
nombre_billet(dossier = "D:/Working with softwares/CDF_PREDICTION/")
1000*8
nombre_billet(dossier = "D:/Working with softwares/CDF_PREDICTION/")
res <- nombre_billet(dossier = "D:/Working with softwares/CDF_PREDICTION/")
sum(res$count)
library(fs)
library(dplyr)
# Fonction pour s√©parer les ensembles d'images
split_dataset <- function(main_directory, train_subdir='train', test_subdir='test', split_ratio=0.3) {
train_dir <- file.path(main_directory, train_subdir)
test_dir <- file.path(main_directory, test_subdir)
# Cr√©er le r√©pertoire test s'il n'existe pas
dir_create(test_dir)
# Parcourir les sous-r√©pertoires de train
subdirs <- dir_ls(train_dir, type = "directory")
for (subdir in subdirs) {
train_subdir_path <- subdir
test_subdir_path <- file.path(test_dir, path_file(subdir))
# Cr√©er les sous-r√©pertoires dans test s'ils n'existent pas
dir_create(test_subdir_path)
# Liste des fichiers dans le sous-r√©pertoire de train
files <- dir_ls(train_subdir_path, type = "file")
num_files <- length(files)
num_test_files <- floor(num_files * split_ratio)
# S√©lectionner al√©atoirement des fichiers pour le r√©pertoire test
test_files <- sample(files, num_test_files)
# D√©placer les fichiers s√©lectionn√©s dans le r√©pertoire test
file_move(test_files, test_subdir_path)
}
}
# Utilisation de la fonction
main_directory <- 'D:/Working with softwares/CDF_PREDICTION/'
split_dataset(main_directory)
install.packages("shinychat")
library(shinychat)
library(shiny)
library(bslib)
library(shinychat)
ui <- page_fillable(
chat_ui("chat", fill = TRUE)
)
server <- function(input, output, session) {
observeEvent(input$chat_user_input, {
# In a real app, this would call out to a chat model or API,
# perhaps using the 'elmer' package.
response <- paste0(
"You said:\n\n",
"<blockquote>",
htmltools::htmlEscape(input$chat_user_input),
"</blockquote>"
)
chat_append("chat", response)
})
}
shinyApp(ui, server)
library(shiny)
library(bslib)
library(shinychat)
ui <- page_fillable(
chat_ui("chat", fill = TRUE)
)
server <- function(input, output, session) {
observeEvent(input$chat_user_input, {
# In a real app, this would call out to a chat model or API,
# perhaps using the 'elmer' package.
response <- paste0(
"You said:\n\n",
"<blockquote>",
htmltools::htmlEscape(input$chat_user_input),
"</blockquote>"
)
chat_append("chat", response)
})
}
shinyApp(ui, server)
library(shiny)
library(bslib)
library(shinychat)
ui <- page_fillable(
chat_ui("chat", fill = TRUE)
)
server <- function(input, output, session) {
observeEvent(input$chat_user_input, {
# In a real app, this would call out to a chat model or API,
# perhaps using the 'elmer' package.
response <- paste0(
"You said:\n\n",
"<blockquote>",
htmltools::htmlEscape(input$chat_user_input),
"</blockquote>"
)
chat_append("chat", response)
})
}
shinyApp(ui, server)
library(shiny)
library(bslib)
library(shinychat)
ui <- page_fillable(
chat_ui("chat", fill = F)
)
server <- function(input, output, session) {
observeEvent(input$chat_user_input, {
# In a real app, this would call out to a chat model or API,
# perhaps using the 'elmer' package.
response <- paste0(
"You said:\n\n",
"<blockquote>",
htmltools::htmlEscape(input$chat_user_input),
"</blockquote>"
)
chat_append("chat", response)
})
}
shinyApp(ui, server)
library(shiny)
library(bslib)
library(shinychat)
ui <- page_fillable(
chat_ui("chat", fill = TRUE)
)
server <- function(input, output, session) {
observeEvent(input$chat_user_input, {
# In a real app, this would call out to a chat model or API,
# perhaps using the 'elmer' package.
response <- paste0(
"You said:\n\n",
"<blockquote>",
htmltools::htmlEscape(input$chat_user_input),
"</blockquote>"
)
chat_append("chat", response)
})
}
shinyApp(ui, server)
library(shiny)
library(bslib)
library(shinychat)
ui <- page_fillable(
chat_ui("chat", fill = TRUE)
)
server <- function(input, output, session) {
observeEvent(input$chat_user_input, {
# In a real app, this would call out to a chat model or API,
# perhaps using the 'elmer' package.
response <- paste0(
"You said:\n\n",
"<blockquote>",
htmltools::htmlEscape(input$chat_user_input),
"</blockquote>"
)
chat_append("chat", response)
})
}
shinyApp(ui, server)
ui <- page_fillable(
chat_ui("chat", fill = TRUE)
)
server <- function(input, output, session) {
observeEvent(input$chat_user_input, {
# In a real app, this would call out to a chat model or API,
# perhaps using the 'elmer' package.
response <- paste0(
"You said:\n\n",
"<blockquote>",
htmltools::htmlEscape(input$chat_user_input),
"</blockquote>"
)
chat_append("chat", response)
})
}
shinyApp(ui, server)
ui <- page_fillable(
chat_ui("chat", fill = TRUE)
)
server <- function(input, output, session) {
observeEvent(input$chat_user_input, {
# In a real app, this would call out to a chat model or API,
# perhaps using the 'elmer' package.
response <- paste0(
"You said:\n\n",
"<blockquote>",
htmltools::htmlEscape(input$chat_user_input),
"</blockquote>"
)
chat_append("chat", response)
})
}
shinyApp(ui, server)
blogdown::serve_site()
