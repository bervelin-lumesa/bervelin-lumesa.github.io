blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
install.packages("gtsummary")
?gtsummary::tbl_summary()
trial |>
select(age, grade, response) |>
tbl_summary()
library(gtsummary)
trial |>
select(age, grade, response) |>
tbl_summary()
tbl_summary()
blogdown::serve_site()
install.packages("survey")
?bslib::accordion()
items <- lapply(LETTERS, function(x) {
accordion_panel(paste("Section", x), paste("Some narrative for section", x))
})
library(shiny)
library(bslib)
items <- lapply(LETTERS, function(x) {
accordion_panel(paste("Section", x), paste("Some narrative for section", x))
})
# First shown by default
accordion(!!!items)
# First shown by default
accordion(!!!items)
# Nothing shown by default
accordion(!!!items, open = FALSE)
# Everything shown by default
accordion(!!!items, open = TRUE)
# Show particular sections
accordion(!!!items, open = "Section B")
accordion(!!!items, open = c("Section A", "Section B"))
# Provide an id to create a shiny input binding
library(shiny)
ui <- page_fluid(
accordion(!!!items, id = "acc")
)
server <- function(input, output) {
observe(print(input$acc))
}
shinyApp(ui, server)
install.packages("remotes")
remotes::install_github("tidymodels/TMwR")
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown:::new_post_addin()
blogdown::serve_site()
6825-600
300000/2850
80*2850
30*2850
1300000+400000
1300000+400000+7*12500
1300000+400000+7*12500+25000
170*2850
170*2800
484500-476000
1300000+400000+7*12500+25000+170*2850
1300000+400000+7*12500+25000+210*2850
75*14500
50-32
1300000+400000+7*12500+25000+210*2850-2395000
1300000+400000+7*12500+10000+210*2850
1300000+400000+7*12500+20000+210*2850
1300000+400000+7*12500+25000+210*2850
1300000+400000+7*12500+25000+210*2850+2500
1300000+400000+7*12500+25000+210*2850+2000
blogdown::serve_site()
df_matches <-
tibble(
team = c("FC Bayern München", "SV Werder Bremen", "Borussia Dortmund", "VfB Stuttgart",
"Borussia M'gladbach", "Hamburger SV", "Eintracht Frankfurt",
"FC Schalke 04", "1. FC Köln", "Bayer 04 Leverkusen"),
matches = c(2000, 1992, 1924, 1924, 1898, 1866, 1856, 1832, 1754, 1524),
won =     c(1206,  818,  881,  782,  763,  746,  683,  700,  674,  669),
lost =    c( 363,  676,  563,  673,  636,  625,  693,  669,  628,  447)
) |>
mutate(team = fct_rev(fct_inorder(team))) |>
pivot_longer(
cols = -c(team, matches),
names_to = "type",
values_to = "result"
) |>
mutate(share = result / matches) |>
arrange(team, -share) |>
mutate(is_smaller = if_else(row_number() == 1, 0, 1), .by = team)
library(dplyr)
df_matches <-
tibble(
team = c("FC Bayern München", "SV Werder Bremen", "Borussia Dortmund", "VfB Stuttgart",
"Borussia M'gladbach", "Hamburger SV", "Eintracht Frankfurt",
"FC Schalke 04", "1. FC Köln", "Bayer 04 Leverkusen"),
matches = c(2000, 1992, 1924, 1924, 1898, 1866, 1856, 1832, 1754, 1524),
won =     c(1206,  818,  881,  782,  763,  746,  683,  700,  674,  669),
lost =    c( 363,  676,  563,  673,  636,  625,  693,  669,  628,  447)
) |>
mutate(team = fct_rev(fct_inorder(team))) |>
pivot_longer(
cols = -c(team, matches),
names_to = "type",
values_to = "result"
) |>
mutate(share = result / matches) |>
arrange(team, -share) |>
mutate(is_smaller = if_else(row_number() == 1, 0, 1), .by = team)
library(tidyverse)
df_matches <-
tibble(
team = c("FC Bayern München", "SV Werder Bremen", "Borussia Dortmund", "VfB Stuttgart",
"Borussia M'gladbach", "Hamburger SV", "Eintracht Frankfurt",
"FC Schalke 04", "1. FC Köln", "Bayer 04 Leverkusen"),
matches = c(2000, 1992, 1924, 1924, 1898, 1866, 1856, 1832, 1754, 1524),
won =     c(1206,  818,  881,  782,  763,  746,  683,  700,  674,  669),
lost =    c( 363,  676,  563,  673,  636,  625,  693,  669,  628,  447)
) |>
mutate(team = fct_rev(fct_inorder(team))) |>
pivot_longer(
cols = -c(team, matches),
names_to = "type",
values_to = "result"
) |>
mutate(share = result / matches) |>
arrange(team, -share) |>
mutate(is_smaller = if_else(row_number() == 1, 0, 1), .by = team)
df_matches
# Library
library(ggplot2)
library(dplyr)
library(hrbrthemes)
install.packages("hrbrthemes")
library(hrbrthemes)
# Create data
value1 <- abs(rnorm(26))*2
data <- data.frame(
x=LETTERS[1:26],
value1=value1,
value2=value1+1+rnorm(26, sd=1)
)
data
data
# Reorder data using average? Learn more about reordering in chart #267
data <- data %>%
rowwise() %>%
mutate( mymean = mean(c(value1,value2) )) %>%
arrange(mymean) %>%
mutate(x=factor(x, x))
data
# Plot
ggplot(data) +
geom_segment( aes(x=x, xend=x, y=value1, yend=value2), color="grey") +
geom_point( aes(x=x, y=value1), color=rgb(0.2,0.7,0.1,0.5), size=3 ) +
geom_point( aes(x=x, y=value2), color=rgb(0.7,0.2,0.1,0.5), size=3 ) +
coord_flip()+
theme_ipsum() +
theme(
legend.position = "none",
) +
xlab("") +
ylab("Value of Y")
blogdown::serve_site()
9*9
version
version$platform
version$language
version$version.string
reg <-
iris |>
group_by(Species) |>
nest() |>
mutate(
model = map(
data,
~ lm(Sepal.Length ~ Petal.Length + Petal.Width, data = .)
),
tbl = map(model, gtsummary::tbl_regression)
)
ggstats
install.packages("ggstats")
?ggstats::gglikert()
library(ggplot2)
library(dplyr)
likert_levels <- c(
"Strongly disagree",
"Disagree",
"Neither agree nor disagree",
"Agree",
"Strongly agree"
)
set.seed(42)
df <-
tibble(
q1 = sample(likert_levels, 150, replace = TRUE),
q2 = sample(likert_levels, 150, replace = TRUE, prob = 5:1),
q3 = sample(likert_levels, 150, replace = TRUE, prob = 1:5),
q4 = sample(likert_levels, 150, replace = TRUE, prob = 1:5),
q5 = sample(c(likert_levels, NA), 150, replace = TRUE),
q6 = sample(likert_levels, 150, replace = TRUE, prob = c(1, 0, 1, 1, 0))
) %>%
mutate(across(everything(), ~ factor(.x, levels = likert_levels)))
df
tibble(
q1 = sample(likert_levels, 150, replace = TRUE),
q2 = sample(likert_levels, 150, replace = TRUE, prob = 5:1),
q3 = sample(likert_levels, 150, replace = TRUE, prob = 1:5),
q4 = sample(likert_levels, 150, replace = TRUE, prob = 1:5),
q5 = sample(c(likert_levels, NA), 150, replace = TRUE),
q6 = sample(likert_levels, 150, replace = TRUE, prob = c(1, 0, 1, 1, 0))
)
tibble(
q1 = sample(likert_levels, 150, replace = TRUE),
q2 = sample(likert_levels, 150, replace = TRUE, prob = 5:1),
q3 = sample(likert_levels, 150, replace = TRUE, prob = 1:5),
q4 = sample(likert_levels, 150, replace = TRUE, prob = 1:5),
q5 = sample(c(likert_levels, NA), 150, replace = TRUE),
q6 = sample(likert_levels, 150, replace = TRUE, prob = c(1, 0, 1, 1, 0))
) %>%
mutate(across(everything(), ~ factor(.x, levels = likert_levels)))
df <-
tibble(
q1 = sample(likert_levels, 150, replace = TRUE),
q2 = sample(likert_levels, 150, replace = TRUE, prob = 5:1),
q3 = sample(likert_levels, 150, replace = TRUE, prob = 1:5),
q4 = sample(likert_levels, 150, replace = TRUE, prob = 1:5),
q5 = sample(c(likert_levels, NA), 150, replace = TRUE),
q6 = sample(likert_levels, 150, replace = TRUE, prob = c(1, 0, 1, 1, 0))
) %>%
mutate(across(everything(), ~ factor(.x, levels = likert_levels)))
gglikert(df)
library(ggstats)
gglikert(df)
gglikert(df, include = q1:3)
gglikert(df, sort = "ascending")
gglikert(df, sort = "ascending", sort_prop_include_center = TRUE)
gglikert(df, sort = "ascending", sort_method = "mean")
gglikert(df, sort = "ascending", sort_method = "mean")
gglikert(df, reverse_likert = TRUE)
gglikert(df, add_totals = FALSE, add_labels = FALSE)
gglikert(
df,
totals_include_center = TRUE,
totals_hjust = .25,
totals_size = 4.5,
totals_fontface = "italic",
totals_accuracy = .01,
labels_accuracy = 1,
labels_size = 2.5,
labels_hide_below = .25
)
gglikert(df, exclude_fill_values = "Neither agree nor disagree")
gglikert(df)
if (require("labelled")) {
df %>%
set_variable_labels(
q1 = "First question",
q2 = "Second question"
) %>%
gglikert(
variable_labels = c(
q4 = "a custom label",
q6 = "a very very very very very very very very very very long label"
),
y_label_wrap = 25
)
}
# Facets
df_group <- df
df_group$group <- sample(c("A", "B"), 150, replace = TRUE)
gglikert(df_group, q1:q6, facet_rows = vars(group))
gglikert(df_group, q1:q6, facet_cols = vars(group))
gglikert(df_group, q1:q6, y = "group", facet_rows = vars(.question))
# Custom function to be applied on data
f <- function(d) {
d$.question <- forcats::fct_relevel(d$.question, "q5", "q2")
d
}
gglikert(df, include = q1:q6, data_fun = f)
gglikert_stacked(df, q1:q6)
gglikert_stacked(df, q1:q6, add_median_line = TRUE, sort = "asc")
gglikert_stacked(df_group, q1:q6, y = "group", add_median_line = TRUE) +
facet_grid(rows = vars(.question))
install.packages("ratdat")
plot(rnorm(1000))
library(tidyverse)
library(ratdat)
view(complete_old)
head(completed_old)
head(complete_old)
tail(complete_old)
summary(complete_old)
complete_old$month
