pivot_longer(
cols = -c(team, matches),
names_to = "type",
values_to = "result"
) |>
mutate(share = result / matches) |>
arrange(team, -share) |>
mutate(is_smaller = if_else(row_number() == 1, 0, 1), .by = team)
library(dplyr)
df_matches <-
tibble(
team = c("FC Bayern München", "SV Werder Bremen", "Borussia Dortmund", "VfB Stuttgart",
"Borussia M'gladbach", "Hamburger SV", "Eintracht Frankfurt",
"FC Schalke 04", "1. FC Köln", "Bayer 04 Leverkusen"),
matches = c(2000, 1992, 1924, 1924, 1898, 1866, 1856, 1832, 1754, 1524),
won =     c(1206,  818,  881,  782,  763,  746,  683,  700,  674,  669),
lost =    c( 363,  676,  563,  673,  636,  625,  693,  669,  628,  447)
) |>
mutate(team = fct_rev(fct_inorder(team))) |>
pivot_longer(
cols = -c(team, matches),
names_to = "type",
values_to = "result"
) |>
mutate(share = result / matches) |>
arrange(team, -share) |>
mutate(is_smaller = if_else(row_number() == 1, 0, 1), .by = team)
library(tidyverse)
df_matches <-
tibble(
team = c("FC Bayern München", "SV Werder Bremen", "Borussia Dortmund", "VfB Stuttgart",
"Borussia M'gladbach", "Hamburger SV", "Eintracht Frankfurt",
"FC Schalke 04", "1. FC Köln", "Bayer 04 Leverkusen"),
matches = c(2000, 1992, 1924, 1924, 1898, 1866, 1856, 1832, 1754, 1524),
won =     c(1206,  818,  881,  782,  763,  746,  683,  700,  674,  669),
lost =    c( 363,  676,  563,  673,  636,  625,  693,  669,  628,  447)
) |>
mutate(team = fct_rev(fct_inorder(team))) |>
pivot_longer(
cols = -c(team, matches),
names_to = "type",
values_to = "result"
) |>
mutate(share = result / matches) |>
arrange(team, -share) |>
mutate(is_smaller = if_else(row_number() == 1, 0, 1), .by = team)
df_matches
# Library
library(ggplot2)
library(dplyr)
library(hrbrthemes)
install.packages("hrbrthemes")
library(hrbrthemes)
# Create data
value1 <- abs(rnorm(26))*2
data <- data.frame(
x=LETTERS[1:26],
value1=value1,
value2=value1+1+rnorm(26, sd=1)
)
data
data
# Reorder data using average? Learn more about reordering in chart #267
data <- data %>%
rowwise() %>%
mutate( mymean = mean(c(value1,value2) )) %>%
arrange(mymean) %>%
mutate(x=factor(x, x))
data
# Plot
ggplot(data) +
geom_segment( aes(x=x, xend=x, y=value1, yend=value2), color="grey") +
geom_point( aes(x=x, y=value1), color=rgb(0.2,0.7,0.1,0.5), size=3 ) +
geom_point( aes(x=x, y=value2), color=rgb(0.7,0.2,0.1,0.5), size=3 ) +
coord_flip()+
theme_ipsum() +
theme(
legend.position = "none",
) +
xlab("") +
ylab("Value of Y")
blogdown::serve_site()
9*9
version
version$platform
version$language
version$version.string
reg <-
iris |>
group_by(Species) |>
nest() |>
mutate(
model = map(
data,
~ lm(Sepal.Length ~ Petal.Length + Petal.Width, data = .)
),
tbl = map(model, gtsummary::tbl_regression)
)
ggstats
install.packages("ggstats")
?ggstats::gglikert()
library(ggplot2)
library(dplyr)
likert_levels <- c(
"Strongly disagree",
"Disagree",
"Neither agree nor disagree",
"Agree",
"Strongly agree"
)
set.seed(42)
df <-
tibble(
q1 = sample(likert_levels, 150, replace = TRUE),
q2 = sample(likert_levels, 150, replace = TRUE, prob = 5:1),
q3 = sample(likert_levels, 150, replace = TRUE, prob = 1:5),
q4 = sample(likert_levels, 150, replace = TRUE, prob = 1:5),
q5 = sample(c(likert_levels, NA), 150, replace = TRUE),
q6 = sample(likert_levels, 150, replace = TRUE, prob = c(1, 0, 1, 1, 0))
) %>%
mutate(across(everything(), ~ factor(.x, levels = likert_levels)))
df
tibble(
q1 = sample(likert_levels, 150, replace = TRUE),
q2 = sample(likert_levels, 150, replace = TRUE, prob = 5:1),
q3 = sample(likert_levels, 150, replace = TRUE, prob = 1:5),
q4 = sample(likert_levels, 150, replace = TRUE, prob = 1:5),
q5 = sample(c(likert_levels, NA), 150, replace = TRUE),
q6 = sample(likert_levels, 150, replace = TRUE, prob = c(1, 0, 1, 1, 0))
)
tibble(
q1 = sample(likert_levels, 150, replace = TRUE),
q2 = sample(likert_levels, 150, replace = TRUE, prob = 5:1),
q3 = sample(likert_levels, 150, replace = TRUE, prob = 1:5),
q4 = sample(likert_levels, 150, replace = TRUE, prob = 1:5),
q5 = sample(c(likert_levels, NA), 150, replace = TRUE),
q6 = sample(likert_levels, 150, replace = TRUE, prob = c(1, 0, 1, 1, 0))
) %>%
mutate(across(everything(), ~ factor(.x, levels = likert_levels)))
df <-
tibble(
q1 = sample(likert_levels, 150, replace = TRUE),
q2 = sample(likert_levels, 150, replace = TRUE, prob = 5:1),
q3 = sample(likert_levels, 150, replace = TRUE, prob = 1:5),
q4 = sample(likert_levels, 150, replace = TRUE, prob = 1:5),
q5 = sample(c(likert_levels, NA), 150, replace = TRUE),
q6 = sample(likert_levels, 150, replace = TRUE, prob = c(1, 0, 1, 1, 0))
) %>%
mutate(across(everything(), ~ factor(.x, levels = likert_levels)))
gglikert(df)
library(ggstats)
gglikert(df)
gglikert(df, include = q1:3)
gglikert(df, sort = "ascending")
gglikert(df, sort = "ascending", sort_prop_include_center = TRUE)
gglikert(df, sort = "ascending", sort_method = "mean")
gglikert(df, sort = "ascending", sort_method = "mean")
gglikert(df, reverse_likert = TRUE)
gglikert(df, add_totals = FALSE, add_labels = FALSE)
gglikert(
df,
totals_include_center = TRUE,
totals_hjust = .25,
totals_size = 4.5,
totals_fontface = "italic",
totals_accuracy = .01,
labels_accuracy = 1,
labels_size = 2.5,
labels_hide_below = .25
)
gglikert(df, exclude_fill_values = "Neither agree nor disagree")
gglikert(df)
if (require("labelled")) {
df %>%
set_variable_labels(
q1 = "First question",
q2 = "Second question"
) %>%
gglikert(
variable_labels = c(
q4 = "a custom label",
q6 = "a very very very very very very very very very very long label"
),
y_label_wrap = 25
)
}
# Facets
df_group <- df
df_group$group <- sample(c("A", "B"), 150, replace = TRUE)
gglikert(df_group, q1:q6, facet_rows = vars(group))
gglikert(df_group, q1:q6, facet_cols = vars(group))
gglikert(df_group, q1:q6, y = "group", facet_rows = vars(.question))
# Custom function to be applied on data
f <- function(d) {
d$.question <- forcats::fct_relevel(d$.question, "q5", "q2")
d
}
gglikert(df, include = q1:q6, data_fun = f)
gglikert_stacked(df, q1:q6)
gglikert_stacked(df, q1:q6, add_median_line = TRUE, sort = "asc")
gglikert_stacked(df_group, q1:q6, y = "group", add_median_line = TRUE) +
facet_grid(rows = vars(.question))
install.packages("ratdat")
plot(rnorm(1000))
library(tidyverse)
library(ratdat)
view(complete_old)
head(completed_old)
head(complete_old)
tail(complete_old)
summary(complete_old)
complete_old$month
blogdown::serve_site()
50*99
100*99
101*99
102*99
29*50
9*10*10
99*20
99*20*5
99*50*5
99*50
99*25
99*25*5
150*2*12
99*25
99*25-150*12
99*25-100*12
99*25-50*12
99*25
99*50
100*12
99*50-100*12
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
install.packages("shinymanager", repos = c("https://datastorm-open.r-universe.dev", "https://cloud.r-project.org"))
read.csv("https://gamlss-dev.r-universe.dev/gamlss.data/data/CD4/csv")
jsonlite::fromJSON("https://gamlss-dev.r-universe.dev/gamlss.data/data/CD4/json")
read.csv("https://gamlss-dev.r-universe.dev/gamlss.data/data/oil/csv")
jsonlite::fromJSON("https://www.openml.org/api/v1/json/data/31")
df <- jsonlite::fromJSON("https://www.openml.org/api/v1/json/data/31")
library(foreign)
library(foreign)
data <- read.arff("https://www.openml.org/data/download/37/dataset_37_diabetes.arff")
data
table(data$class)
prop.table(table(data$class))
# install.packages("remotes")
remotes::install_github("rstudio/tensorflow")
library(tensorflow)
?tensorflow::as_tensor()
as_tensor(42, "int32")
library(tensorflow)
install_tensorflow(envname = "r-tensorflow")
blogdown::serve_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::serve_site()
library(questionr)
iorder()
questionr:::icut()
df <- iris
questionr:::irec()
View(df)
df$Species_rec <- as.character(df$Species)
df$Species_rec <- factor(df$Species_rec)
View(df)
rm(list = ls())
library(leaflet)
leaflet()
leaflet() |>
addTiles()
servr::browse_last()
blogdown::serve_site()
menages <- data.frame(
id_menage = 1:4,
longitude = c(15.3522, 15.4050, 15.1276, 15.2093),
latitude = c(-4.8566, -4.5200, -4.5074, -4.8688),
photo_du_menage = c("1.jpg", "2.jpg", "3.jpg", "4.jpg"),
nom_chef = sample(letters, size = 4)
)
head(menages)
menages <- menages |>
rowwise() |>
mutate(photo_encoded = dataURI(file = file.path(dossier_images, photo_du_menage), mime = "image/png"))
library(shiny)
library(leaflet)
library(base64enc)
library(dplyr)
menages <- data.frame(
id_menage = 1:4,
longitude = c(15.3522, 15.4050, 15.1276, 15.2093),
latitude = c(-4.8566, -4.5200, -4.5074, -4.8688),
photo_du_menage = c("1.jpg", "2.jpg", "3.jpg", "4.jpg"),
nom_chef = sample(letters, size = 4)
)
head(menages)
dossier_images = 'images'
menages <- menages |>
rowwise() |>
mutate(photo_encoded = dataURI(file = file.path(dossier_images, photo_du_menage), mime = "image/png"))
(m <- leaflet(menages) %>%
addTiles())
# Ajouter les marqueurs avec les photos dans les pop-ups.
for (i in 1:nrow(menages)) {
m <- m %>%
addMarkers(
lng = menages$longitude[i],
lat = menages$latitude[i],
popup = paste0("<table>",
"<tr>",
"<td>Nom du chef de ménage</td>",
paste("<td>:", menages$nom_chef, "</td>"),
"</tr>",
"</table>",
"<img src='", menages$photo_encoded[i], "' width='200' height='100'>")
)
}
m
# Ajouter les marqueurs avec les photos dans les pop-ups.
for (i in 1:nrow(menages)) {
m <- m %>%
addMarkers(
lng = menages$longitude[i],
lat = menages$latitude[i],
popup = paste0("<table>",
"<tr>",
"<td>Nom du chef de ménage</td>",
paste("<td>:", menages$nom_chef, "</td>"),
"</tr>",
"</table>",
"<img src='", menages$photo_encoded[i], "' width='200' height='150'>")
)
}
m
set.seed(42)
menages <- data.frame(
id_menage = 1:4,
longitude = c(15.3522, 15.4050, 15.1276, 15.2093),
latitude = c(-4.8566, -4.5200, -4.5074, -4.8688),
photo_du_menage = c("1.jpg", "2.jpg", "3.jpg", "4.jpg"),
nom_chef = sample(letters, size = 4)
)
head(menages)
menages
# Ajouter les marqueurs avec les photos dans les pop-ups.
for (i in 1:nrow(menages)) {
m <- m %>%
addMarkers(
lng = menages$longitude[i],
lat = menages$latitude[i],
popup = paste0("<table>",
"<tr>",
"<td>Nom du chef de ménage</td>",
paste("<td>:", menages$nom_chef, "</td>"),
"</tr>",
"</table>",
"<img src='", menages$photo_encoded[i], "' width='200' height='150'>")
)
}
m
library(charlatan)
ch_generate()
ch_generate("names")
ch_generate("name")
nom <- ch_generate("name")
nom
nom
set.seed(42)
menages <- data.frame(
id_menage = 1:4,
longitude = c(15.3522, 15.4050, 15.1276, 15.2093),
latitude = c(-4.8566, -4.5200, -4.5074, -4.8688),
photo_du_menage = c("1.jpg", "2.jpg", "3.jpg", "4.jpg"),
nom_chef = nom
)
set.seed(42)
menages <- data.frame(
id_menage = 1:10,
longitude = c(15.3522, 15.4050, 15.1276, 15.2093,
15.4522, 15.3050, 15.2276, 15.5093, 15.4750, 15.3876),
latitude = c(-4.8566, -4.5200, -4.5074, -4.8688,
-4.1566, -4.4200, -4.1074, -4.2688, -4.1574, -4.4688),
photo_du_menage = c("1.jpg", "2.jpg", "3.jpg", "4.jpg,
5.jpg", "6.jpg", "7.jpg", "8.jpg", "9.jpg", "10.jpg"),
nom_chef = nom
)
id_menage = 1:10
length(id_menage)
longitude = c(15.3522, 15.4050, 15.1276, 15.2093,
15.4522, 15.3050, 15.2276, 15.5093, 15.4750, 15.3876)
length(longitude)
latitude = c(-4.8566, -4.5200, -4.5074, -4.8688,
-4.1566, -4.4200, -4.1074, -4.2688, -4.1574, -4.4688)
length(latitude)
photo_du_menage = c("1.jpg", "2.jpg", "3.jpg", "4.jpg,
5.jpg", "6.jpg", "7.jpg", "8.jpg", "9.jpg", "10.jpg")
length(photo_du_menage)
set.seed(42)
menages <- data.frame(
id_menage = 1:10,
longitude = c(15.3522, 15.4050, 15.1276, 15.2093,
15.4522, 15.3050, 15.2276, 15.5093, 15.4750, 15.3876),
latitude = c(-4.8566, -4.5200, -4.5074, -4.8688,
-4.1566, -4.4200, -4.1074, -4.2688, -4.1574, -4.4688),
photo_du_menage = c("1.jpg", "2.jpg", "3.jpg", "4.jpg",
"5.jpg", "6.jpg", "7.jpg", "8.jpg", "9.jpg", "10.jpg"),
nom_chef = nom
)
head(menages)
menages
set.seed(42)
menages <- data.frame(
id_menage = 1:10,
longitude = c(15.3522, 15.4050, 15.1276, 15.2093,
15.4522, 15.3050, 15.2276, 15.5093, 15.4750, 15.3876),
latitude = c(-4.8566, -4.5200, -4.5074, -4.8688,
-4.1566, -4.4200, -4.1074, -4.2688, -4.1574, -4.4688),
photo_du_menage = c("1.jpg", "2.jpg", "3.jpg", "4.jpg",
"5.jpg", "6.jpg", "7.jpg", "8.jpg", "9.jpg", "10.jpg"),
nom_chef = nom
)
head(menages)
nom
library(shiny)
library(leaflet)
library(base64enc)
library(dplyr)
library(charlatan)
set.seed(42)
nom <- ch_generate("name")
menages <- data.frame(
id_menage = 1:10,
longitude = c(15.3522, 15.4050, 15.1276, 15.2093,
15.4522, 15.3050, 15.2276, 15.5093, 15.4750, 15.3876),
latitude = c(-4.8566, -4.5200, -4.5074, -4.8688,
-4.1566, -4.4200, -4.1074, -4.2688, -4.1574, -4.4688),
photo_du_menage = c("1.jpg", "2.jpg", "3.jpg", "4.jpg",
"5.jpg", "6.jpg", "7.jpg", "8.jpg", "9.jpg", "10.jpg"),
nom_chef = nom
)
head(menages)
set.seed(42)
nom <- ch_generate("name")
menages <- data.frame(
id_menage = 1:10,
longitude = c(15.3522, 15.4050, 15.1276, 15.2093,
15.4522, 15.3050, 15.2276, 15.5093, 15.4750, 15.3876),
latitude = c(-4.8566, -4.5200, -4.5074, -4.8688,
-4.1566, -4.4200, -4.1074, -4.2688, -4.1574, -4.4688),
photo_du_menage = c("1.jpg", "2.jpg", "3.jpg", "4.jpg",
"5.jpg", "6.jpg", "7.jpg", "8.jpg", "9.jpg", "10.jpg"),
nom_chef = nom
)
head(menages)
getwd()
write.csv(menages, "content/post/2024-11-14-cartographie-interactive-integrer-des-photos-d-enquetes-menages-avec-leaflet-et-r/df.csv")
menages
names(menages)
names(menages)[5]
names(menages)[5] <- "nom_chef"
write.csv(menages, "content/post/2024-11-14-cartographie-interactive-integrer-des-photos-d-enquetes-menages-avec-leaflet-et-r/df.csv")
df <- read.csv("content/post/2024-11-14-cartographie-interactive-integrer-des-photos-d-enquetes-menages-avec-leaflet-et-r/df.csv")
df <- read.csv("df.csv")
df <- read.csv("df.csv")
head(df)
df <- read.csv("df.csv")
head(df)
df <- read.csv("df.csv", row.names = F)
write.csv(menages, "content/post/2024-11-14-cartographie-interactive-integrer-des-photos-d-enquetes-menages-avec-leaflet-et-r/df.csv", row.names = F)
df <- read.csv("df.csv")
head(df)
menages <- menages |>
rowwise() |>
mutate(photo_encoded = dataURI(file = file.path(dossier_images, photo_du_menage), mime = "image/png"))
(m <- leaflet(menages) %>%
addTiles())
# Ajouter les marqueurs avec les photos dans les pop-ups.
for (i in 1:nrow(menages)) {
m <- m %>%
addMarkers(
lng = menages$longitude[i],
lat = menages$latitude[i],
popup = paste0("<table>",
"<tr>",
"<td>Nom du chef de ménage</td>",
paste("<td>:", menages$nom_chef[i], "</td>"),
"</tr>",
"</table>",
"<img src='", menages$photo_encoded[i], "' width='200' height='150'>")
)
}
m
df <- read.csv("df.csv")
head(df)
df |>
select(id_menage, nom_chef)
df |> select(id_menage, nom_chef, latitude, longitude, photo_du_menage)
df <- df |> select(id_menage, nom_chef, latitude, longitude, photo_du_menage)
names(df)
names(df)[5]
names(df)[5] <- "photo_mild"
df
write.csv(df, "content/post/2024-11-14-cartographie-interactive-integrer-des-photos-d-enquetes-menages-avec-leaflet-et-r/df.csv", row.names = F)
df <- read.csv("df.csv")
head(df)
blogdown::serve_site()
blogdown:::new_post_addin()
